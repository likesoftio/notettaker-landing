# Production Docker Compose
version: "3.8"

services:
  postgres:
    image: postgres:15-alpine
    container_name: myblog_postgres_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - myblog_network_prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: myblog_redis_prod
    networks:
      - myblog_network_prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: myblog_backend_prod
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - DJANGO_SETTINGS_MODULE=myblog.settings.production
    volumes:
      - static_volume_prod:/app/staticfiles
      - media_volume_prod:/app/media
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - myblog_network_prod
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn --bind 0.0.0.0:8000 --workers 3 myblog.wsgi:application"
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: myblog_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - static_volume_prod:/app/staticfiles:ro
      - media_volume_prod:/app/media:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    networks:
      - myblog_network_prod
    restart: unless-stopped

  celery:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: myblog_celery_prod
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - DJANGO_SETTINGS_MODULE=myblog.settings.production
    volumes:
      - media_volume_prod:/app/media
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - myblog_network_prod
    command: celery -A myblog worker -l info
    restart: unless-stopped

volumes:
  postgres_data_prod:
    driver: local
  static_volume_prod:
    driver: local
  media_volume_prod:
    driver: local

networks:
  myblog_network_prod:
    driver: bridge

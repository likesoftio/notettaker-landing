# Docker Compose для полного стека разработки
version: "3.8"

services:
  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: myblog_postgres
    environment:
      POSTGRES_DB: myblog
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - myblog_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (для кэширования и сессий)
  redis:
    image: redis:7-alpine
    container_name: myblog_redis
    ports:
      - "6379:6379"
    networks:
      - myblog_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Django backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: myblog_backend
    environment:
      - DEBUG=True
      - SECRET_KEY=django-insecure-dev-key-change-in-production
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/myblog
      - REDIS_URL=redis://redis:6379/0
      - ALLOWED_HOSTS=localhost,127.0.0.1,backend,0.0.0.0
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000,http://frontend:3000
      - DJANGO_SETTINGS_MODULE=myblog.settings
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - myblog_network
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"
    restart: unless-stopped

  # Nginx (для production)
  nginx:
    image: nginx:alpine
    container_name: myblog_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/app/staticfiles:ro
      - media_volume:/app/media:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    networks:
      - myblog_network
    restart: unless-stopped

  # Celery worker (для асинхронных задач)
  celery:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: myblog_celery
    environment:
      - DEBUG=True
      - SECRET_KEY=django-insecure-dev-key-change-in-production
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/myblog
      - REDIS_URL=redis://redis:6379/0
      - DJANGO_SETTINGS_MODULE=myblog.settings
    volumes:
      - .:/app
      - media_volume:/app/media
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - myblog_network
    command: celery -A myblog worker -l info
    restart: unless-stopped

  # Celery beat (для периодических задач)
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: myblog_celery_beat
    environment:
      - DEBUG=True
      - SECRET_KEY=django-insecure-dev-key-change-in-production
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/myblog
      - REDIS_URL=redis://redis:6379/0
      - DJANGO_SETTINGS_MODULE=myblog.settings
    volumes:
      - .:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - myblog_network
    command: celery -A myblog beat -l info
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local

networks:
  myblog_network:
    driver: bridge

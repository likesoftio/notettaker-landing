#!/usr/bin/env python3
"""
–ï–¥–∏–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞ Django backend —Å Docker
"""

import os
import shutil
import subprocess
import sys
from pathlib import Path

def run_command(command, description, shell=True):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º"""
    print(f"\nüîÑ {description}")
    print(f"–í—ã–ø–æ–ª–Ω—è—é: {command}")
    
    result = subprocess.run(command, shell=shell, capture_output=True, text=True)
    
    if result.returncode == 0:
        print(f"‚úÖ {description} - —É—Å–ø–µ—à–Ω–æ")
        if result.stdout.strip():
            print(result.stdout)
        return True
    else:
        print(f"‚ùå {description} - –æ—à–∏–±–∫–∞")
        if result.stderr.strip():
            print(f"–û—à–∏–±–∫–∞: {result.stderr}")
        if result.stdout.strip():
            print(f"–í—ã–≤–æ–¥: {result.stdout}")
        return False

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ Docker –∏ Docker Compose"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    if not run_command("docker --version", "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker"):
        print("‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Desktop:")
        print("   https://www.docker.com/products/docker-desktop/")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
    if not run_command("docker-compose --version", "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose"):
        print("‚ùå Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose")
        return False
    
    return True

def create_project_structure():
    """–°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞"""
    
    project_dir = "myblog_backend"
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if os.path.exists(project_dir):
        response = input(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {project_dir} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –£–¥–∞–ª–∏—Ç—å –µ—ë? (y/N): ")
        if response.lower() == 'y':
            shutil.rmtree(project_dir)
        else:
            print("–û—Ç–º–µ–Ω–µ–Ω–æ")
            return False, None
    
    # –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –Ω–µ—ë
    os.makedirs(project_dir)
    original_dir = os.getcwd()
    os.chdir(project_dir)
    
    print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    
    # –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É Django
    directories = [
        "myblog",
        "blog", 
        "blog/migrations",
        "static",
        "media",
        "templates",
        "logs",
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
    
    # –°–æ–∑–¥–∞—Ç—å __init__.py —Ñ–∞–π–ª—ã
    init_files = [
        "myblog/__init__.py",
        "blog/__init__.py", 
        "blog/migrations/__init__.py",
    ]
    
    for init_file in init_files:
        Path(init_file).touch()
    
    return True, original_dir

def copy_docker_files(original_dir):
    """–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å Docker —Ñ–∞–π–ª—ã –∏–∑ docker-setup"""
    
    source_dir = Path(original_dir) / "docker-setup"
    
    if not source_dir.exists():
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {source_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    files_to_copy = [
        "Dockerfile",
        "docker-compose.yml", 
        "docker-compose.prod.yml",
        "requirements.txt",
        "nginx.conf",
        ".env.template",
        "start.sh",
    ]
    
    for file_name in files_to_copy:
        source_file = source_dir / file_name
        if source_file.exists():
            shutil.copy2(source_file, file_name)
            print(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {file_name}")
        else:
            print(f"‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {source_file}")
    
    # –°–æ–∑–¥–∞—Ç—å .env –∏–∑ —à–∞–±–ª–æ–Ω–∞
    if Path(".env.template").exists():
        shutil.copy2(".env.template", ".env")
        print("‚úÖ –°–æ–∑–¥–∞–Ω .env —Ñ–∞–π–ª")
    
    return True

def copy_django_files(original_dir):
    """–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ Django —Ñ–∞–π–ª—ã"""
    
    source_dir = Path(original_dir) / "docker-setup" / "django_files"
    
    if not source_dir.exists():
        print(f"‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å Django —Ñ–∞–π–ª–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {source_dir}")
        print("üìö –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∏–∑ DJANGO_SETUP_MANUAL.md –≤—Ä—É—á–Ω—É—é")
        return True
    
    # –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã Django
    django_files = {
        "settings.py": "myblog/settings.py",
        "urls.py": "myblog/urls.py",
    }
    
    for source_name, dest_path in django_files.items():
        source_file = source_dir / source_name
        if source_file.exists():
            shutil.copy2(source_file, dest_path)
            print(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {dest_path}")
    
    return True

def create_remaining_django_files():
    """–°–æ–∑–¥–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ Django —Ñ–∞–π–ª—ã"""
    
    # manage.py
    manage_py = '''#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys

if __name__ == '__main__':
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myblog.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)
'''
    
    with open("manage.py", "w") as f:
        f.write(manage_py)
    os.chmod("manage.py", 0o755)
    
    # wsgi.py
    wsgi_py = '''"""
WSGI config for myblog project.
"""

import os
from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myblog.settings')
application = get_wsgi_application()
'''
    
    with open("myblog/wsgi.py", "w") as f:
        f.write(wsgi_py)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ Django —Ñ–∞–π–ª—ã")

def run_docker_setup():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å Docker setup"""
    
    print("\nüê≥ –ó–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
    
    # –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
    if not run_command("docker-compose build", "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤"):
        return False
    
    # –ó–∞–ø—É—Å–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if not run_command("docker-compose up -d postgres redis", "–ó–∞–ø—É—Å–∫ PostgreSQL –∏ Redis"):
        return False
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL (30 —Å–µ–∫)...")
    run_command("sleep 30", "–û–∂–∏–¥–∞–Ω–∏–µ", shell=True)
    
    # –ú–∏–≥—Ä–∞—Ü–∏–∏
    if not run_command("docker-compose run --rm backend python manage.py migrate", "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π"):
        print("‚ö†Ô∏è  –ú–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –º–æ–¥–µ–ª–∏ Django")
    
    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    if not run_command("docker-compose up -d", "–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"):
        return False
    
    return True

def main():
    print("üê≥ –°–æ–∑–¥–∞–Ω–∏–µ Django REST Framework backend —Å Docker")
    print("=" * 65)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not check_dependencies():
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
    success, original_dir = create_project_structure()
    if not success:
        return
    
    try:
        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ Docker —Ñ–∞–π–ª–æ–≤
        if not copy_docker_files(original_dir):
            return
        
        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ Django —Ñ–∞–π–ª–æ–≤
        copy_django_files(original_dir)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö Django —Ñ–∞–π–ª–æ–≤
        create_remaining_django_files()
        
        # –ó–∞–ø—É—Å–∫ Docker
        if run_docker_setup():
            print("\nüéâ Django backend —Å Docker —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø—É—â–µ–Ω!")
            print("\nüìç –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:")
            print("   - API: http://localhost:8000/api/")
            print("   - Admin: http://localhost:8000/admin/")
            print("   - Swagger: http://localhost:8000/api/swagger/")
            print("\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ React frontend:")
            print("   –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –≤ React –ø—Ä–æ–µ–∫—Ç–µ:")
            print("   VITE_API_URL=http://localhost:8000")
            print("   VITE_USE_DRF=true")
            print("\nüìö –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞:")
            print("   1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –º–æ–¥–µ–ª–∏ –∏–∑ DJANGO_SETUP_MANUAL.md")
            print("   2. docker-compose run --rm backend python manage.py makemigrations blog")
            print("   3. docker-compose run --rm backend python manage.py migrate")
            print("   4. docker-compose run --rm backend python manage.py createsuperuser")
        else:
            print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Docker")
    
    finally:
        # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∏—Å—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        if original_dir:
            os.chdir(original_dir)

if __name__ == "__main__":
    main()

// Database configuration and connection
// Using localStorage for demo purposes - in production use SQLite/PostgreSQL

export interface BlogPost {
  id: string;
  title: string;
  slug: string;
  content: string;
  excerpt: string;
  heroImage: string;
  category: string;
  tags: string[];
  author: string;
  publishedAt: string;
  updatedAt: string;
  status: "draft" | "published" | "archived";
  featured: boolean;
  seoTitle?: string;
  seoDescription?: string;
  seoKeywords?: string[];
  readTime: number;
  views: number;
  likes?: number;
  shares?: number;
  difficulty?: "beginner" | "intermediate" | "advanced";
  language?: string;
  series?: string;
  seriesOrder?: number;
  relatedPosts?: string[];
  tableOfContents?: Array<{
    id: string;
    title: string;
    level: number;
  }>;
  socialMedia?: {
    twitter?: string;
    linkedin?: string;
    facebook?: string;
  };
  customFields?: Record<string, any>;
}

export interface BlogCategory {
  id: string;
  name: string;
  slug: string;
  description?: string;
  color?: string;
  postCount: number;
}

export interface BlogAuthor {
  id: string;
  name: string;
  email: string;
  avatar?: string;
  bio?: string;
  socialLinks?: {
    twitter?: string;
    linkedin?: string;
    github?: string;
  };
}

export interface BlogStats {
  totalPosts: number;
  totalViews: number;
  totalCategories: number;
  publishedPosts: number;
  draftPosts: number;
}

// Storage keys
const STORAGE_KEYS = {
  POSTS: "blog_posts",
  CATEGORIES: "blog_categories",
  AUTHORS: "blog_authors",
  SETTINGS: "blog_settings",
} as const;

// Database class for blog management
class BlogDatabase {
  private initialized = false;

  constructor() {
    this.initializeData();
  }

  // Initialize with sample data if empty
  private initializeData() {
    if (this.initialized) return;

    console.log("üìö Initializing blog database...");

    // Initialize sample categories
    if (!localStorage.getItem(STORAGE_KEYS.CATEGORIES)) {
      const sampleCategories: BlogCategory[] = [
        {
          id: "tech-ai",
          name: "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –ò–ò",
          slug: "tech-ai",
          description: "–°—Ç–∞—Ç—å–∏ –æ –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ",
          color: "bg-blue-600",
          postCount: 0,
        },
        {
          id: "task-management",
          name: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏",
          slug: "task-management",
          description:
            "–ú–µ—Ç–æ–¥—ã –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏",
          color: "bg-green-600",
          postCount: 0,
        },
        {
          id: "product-news",
          name: "–ù–æ–≤–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∞",
          slug: "product-news",
          description: "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ mymeet.ai",
          color: "bg-purple-600",
          postCount: 0,
        },
        {
          id: "meeting-tips",
          name: "–°–æ–≤–µ—Ç—ã –ø–æ –≤—Å—Ç—Ä–µ—á–∞–º",
          slug: "meeting-tips",
          description: "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á",
          color: "bg-orange-600",
          postCount: 0,
        },
        {
          id: "customer-stories",
          name: "–ò—Å—Ç–æ—Ä–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤",
          slug: "customer-stories",
          description: "–†–µ–∞–ª—å–Ω—ã–µ –∫–µ–π—Å—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è mymeet.ai",
          color: "bg-indigo-600",
          postCount: 0,
        },
        {
          id: "sales-art",
          name: "–ò—Å–∫—É—Å—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂",
          slug: "sales-art",
          description: "–¢–µ—Ö–Ω–∏–∫–∏ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂",
          color: "bg-red-600",
          postCount: 0,
        },
      ];
      this.saveData(STORAGE_KEYS.CATEGORIES, sampleCategories);
    }

    // Initialize sample authors
    if (!localStorage.getItem(STORAGE_KEYS.AUTHORS)) {
      const sampleAuthors: BlogAuthor[] = [
        {
          id: "andrey-shcherbina",
          name: "–ê–Ω–¥—Ä–µ–π –©–µ—Ä–±–∏–Ω–∞",
          email: "andrey@mymeet.ai",
          avatar:
            "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=100&h=100&fit=crop&crop=face",
          bio: "–í–µ–¥—É—â–∏–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∏ —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ò–ò –≤ mymeet.ai",
          socialLinks: {
            twitter: "https://twitter.com/andrey_ai",
            linkedin: "https://linkedin.com/in/andrey-shcherbina",
          },
        },
        {
          id: "maria-petrov",
          name: "–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞",
          email: "maria@mymeet.ai",
          avatar:
            "https://images.unsplash.com/photo-1494790108755-2616b612b786?w=100&h=100&fit=crop&crop=face",
          bio: "Product Manager –∏ —ç–∫—Å–ø–µ—Ä—Ç –ø–æ UX –≤ mymeet.ai",
          socialLinks: {
            linkedin: "https://linkedin.com/in/maria-petrova",
          },
        },
        {
          id: "team-mymeet",
          name: "–ö–æ–º–∞–Ω–¥–∞ mymeet.ai",
          email: "team@mymeet.ai",
          avatar:
            "https://images.unsplash.com/photo-1522071820081-009f0129c71c?w=100&h=100&fit=crop",
          bio: "–ö–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã–π –∞–≤—Ç–æ—Ä –æ—Ç –∫–æ–º–∞–Ω–¥—ã mymeet.ai",
        },
      ];
      this.saveData(STORAGE_KEYS.AUTHORS, sampleAuthors);
    }

    // Initialize sample posts with all new data
    const existingPostsData = localStorage.getItem(STORAGE_KEYS.POSTS);
    let existingPostsCount = 0;

    try {
      existingPostsCount = existingPostsData
        ? JSON.parse(existingPostsData).length
        : 0;
    } catch (error) {
      console.log("üìä Invalid existing posts data, will reinitialize");
      existingPostsCount = 0;
    }

    console.log(
      `üìä Found ${existingPostsCount} existing posts in localStorage`,
    );
    const shouldInitialize = existingPostsCount < 25;

    if (shouldInitialize) {
      console.log("üìù Creating sample posts...");
      const samplePosts: BlogPost[] = [
        {
          id: "9-chrome-extensions",
          title: "9 –ª—É—á—à–∏—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π Chrome –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ä–µ—á–∏ –≤ —Ç–µ–∫—Å—Ç",
          slug: "9-chrome-extensions",
          content: this.getSampleContent("chrome-extensions"),
          excerpt:
            "–û–±–∑–æ—Ä —Å–∞–º—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.",
          heroImage:
            "https://images.unsplash.com/photo-1516321318423-f06f85e504b3?w=800&h=400&fit=crop",
          category: "tech-ai",
          tags: ["Chrome", "—Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è", "—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è", "—Ä–µ—á—å –≤ —Ç–µ–∫—Å—Ç", "–ò–ò"],
          author: "andrey-shcherbina",
          publishedAt: new Date("2024-12-15").toISOString(),
          updatedAt: new Date("2024-12-15").toISOString(),
          status: "published",
          featured: true,
          seoTitle:
            "9 –ª—É—á—à–∏—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π Chrome –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ä–µ—á–∏ –≤ —Ç–µ–∫—Å—Ç 2024",
          seoDescription:
            "–ü–æ–ª–Ω—ã–π –æ–±–∑–æ—Ä –ª—É—á—à–∏—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π Chrome –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Ä–µ—á–∏ –≤ —Ç–µ–∫—Å—Ç. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π, —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.",
          seoKeywords: [
            "Chrome —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è",
            "—Ä–µ—á—å –≤ —Ç–µ–∫—Å—Ç",
            "—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è",
            "voice to text",
            "–¥–∏–∫—Ç–æ–≤–∫–∞",
          ],
          readTime: 8,
          views: 1247,
          likes: 89,
          shares: 34,
          difficulty: "intermediate",
          language: "ru",
          relatedPosts: ["ai-future-meetings", "speech-recognition-2024"],
          socialMedia: {
            twitter:
              "–û–±–∑–æ—Ä 9 –ª—É—á—à–∏—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π Chrome –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ä–µ—á–∏ –≤ —Ç–µ–∫—Å—Ç. –ü–æ–≤—ã—Å—å—Ç–µ —Å–≤–æ—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! #Chrome #SpeechToText #mymeetai",
            linkedin:
              "–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π Chrome –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏. –ö–∞–∫–æ–µ –≤—ã–±—Ä–∞—Ç—å –¥–ª—è –≤–∞—à–µ–π —Ä–∞–±–æ—Ç—ã?",
          },
          tableOfContents: [
            { id: "intro", title: "–í–≤–µ–¥–µ–Ω–∏–µ", level: 1 },
            { id: "why-important", title: "–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ", level: 2 },
            { id: "top-extensions", title: "–¢–û–ü-9 —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π", level: 1 },
            { id: "voice-in", title: "1. Voice In Voice Typing", level: 2 },
            { id: "speechify", title: "2. Speechify", level: 2 },
            {
              id: "mymeet-clipper",
              title: "3. mymeet.ai Web Clipper",
              level: 2,
            },
            { id: "comparison", title: "–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞", level: 1 },
            { id: "installation", title: "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞", level: 1 },
            { id: "tips", title: "–°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é", level: 1 },
            { id: "conclusion", title: "–ó–∞–∫–ª—é—á–µ–Ω–∏–µ", level: 1 },
          ],
        },
        {
          id: "virtual-reality-meetings",
          title: "VR-–≤—Å—Ç—Ä–µ—á–∏: –Ω–æ–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞",
          slug: "virtual-reality-meetings",
          content: this.getSampleContent("vr-meetings"),
          excerpt:
            "–ò—Å—Å–ª–µ–¥—É–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏–º–º–µ—Ä—Å–∏–≤–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á –∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Ä–∞–±–æ—Ç—ã.",
          heroImage:
            "https://images.unsplash.com/photo-1592478411213-6153e4ebc696?w=800&h=400&fit=crop",
          category: "tech-ai",
          tags: [
            "VR",
            "–≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å",
            "–∏–º–º–µ—Ä—Å–∏–≤–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏",
            "–±—É–¥—É—â–µ–µ",
          ],
          author: "maria-petrov",
          publishedAt: new Date("2024-12-18").toISOString(),
          updatedAt: new Date("2024-12-18").toISOString(),
          status: "published",
          featured: true,
          seoTitle:
            "VR-–≤—Å—Ç—Ä–µ—á–∏ 2024: –∫–∞–∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å –º–µ–Ω—è–µ—Ç –¥–µ–ª–æ–≤—ã–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏",
          seoDescription:
            "–£–∑–Ω–∞–π—Ç–µ –æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö VR-–≤—Å—Ç—Ä–µ—á, –ª—É—á—à–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö –∏ —Ç–æ–º, –∫–∞–∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —É–¥–∞–ª–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É.",
          seoKeywords: [
            "VR –≤—Å—Ç—Ä–µ—á–∏",
            "–≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å",
            "—É–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
            "–º–µ—Ç–∞–≤—Å–µ–ª–µ–Ω–Ω–∞—è",
          ],
          readTime: 12,
          views: 1876,
          likes: 156,
          shares: 67,
          difficulty: "advanced",
          language: "ru",
          series: "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –±—É–¥—É—â–µ–≥–æ",
          seriesOrder: 1,
          relatedPosts: ["ai-future-meetings", "effective-online-meetings"],
          socialMedia: {
            twitter:
              "VR-–≤—Å—Ç—Ä–µ—á–∏ —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–∏–∑–∏—Ä—É—é—Ç –¥–µ–ª–æ–≤—ã–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏! –£–∑–Ω–∞–π—Ç–µ –æ –ª—É—á—à–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö –∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞—Ö. #VR #FutureOfWork #mymeetai",
            linkedin:
              "–ö–∞–∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å –º–µ–Ω—è–µ—Ç —Å–ø–æ—Å–æ–±—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –¥–µ–ª–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á. –ü–æ–ª–Ω—ã–π –≥–∏–¥ –ø–æ VR-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º.",
          },
          tableOfContents: [
            { id: "intro", title: "–í–≤–µ–¥–µ–Ω–∏–µ", level: 1 },
            { id: "what-is-vr", title: "–ß—Ç–æ —Ç–∞–∫–æ–µ VR-–≤—Å—Ç—Ä–µ—á–∏", level: 2 },
            { id: "advantages", title: "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ VR-–≤—Å—Ç—Ä–µ—á", level: 1 },
            { id: "immersion", title: "–ü–æ–ª–Ω–æ–µ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ", level: 2 },
            {
              id: "collaboration",
              title: "–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞",
              level: 2,
            },
            { id: "platforms", title: "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ VR-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã", level: 1 },
            { id: "meta-horizon", title: "Meta Horizon Workrooms", level: 2 },
            { id: "spatial", title: "Spatial", level: 2 },
            { id: "mozilla-hubs", title: "Mozilla Hubs", level: 2 },
            { id: "implementation", title: "–í–Ω–µ–¥—Ä–µ–Ω–∏–µ –≤ –∫–æ–º–ø–∞–Ω–∏–∏", level: 1 },
            { id: "challenges", title: "–í—ã–∑–æ–≤—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", level: 1 },
            { id: "future", title: "–ë—É–¥—É—â–µ–µ VR-–≤—Å—Ç—Ä–µ—á", level: 1 },
          ],
        },
      ];

      this.saveData(STORAGE_KEYS.POSTS, samplePosts);
      console.log(`Saved ${samplePosts.length} sample posts to localStorage`);
    }

    // Update category post counts after initialization
    this.updateCategoryPostCount();

    this.initialized = true;
    console.log("Blog database initialization completed");
  }

  private getSampleContent(type: string): string {
    const contentTemplates = {
      "chrome-extensions": `
        <p class="lead">–í —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–∏—Ä–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–≥—Ä–∞—é—Ç –∫–ª—é—á–µ–≤—É—é —Ä–æ–ª—å –≤ —É—Å–ø–µ—Ö–µ –ª—é–±–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞. –†–∞—Å—à–∏—Ä–µ–Ω–∏—è Chrome –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ä–µ—á–∏ –≤ —Ç–µ–∫—Å—Ç —Å—Ç–∞–ª–∏ –Ω–µ–∑–∞–º–µ–Ω–∏–º—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ñ–µ—Ä.</p>

        <h2 id="intro">–í–≤–µ–¥–µ–Ω–∏–µ</h2>
        <p>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–¥–≤–∏–Ω—É–ª–∏—Å—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–æ–¥—ã. –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –ø–æ–∑–≤–æ–ª—è—é—Ç –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Ç–æ—á–Ω–æ—Å—Ç–∏ –±–æ–ª–µ–µ 95% –≤ –∏–¥–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö.</p>
        
        <h3 id="why-important">–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ</h3>
        <p>–°–∫–æ—Ä–æ—Å—Ç—å –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ –≥–æ–ª–æ—Å–æ–º –≤ 3-4 —Ä–∞–∑–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ. –≠—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –¥–ª—è:</p>
        <ul>
          <li>–ñ—É—Ä–Ω–∞–ª–∏—Å—Ç–æ–≤ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤</li>
          <li>–°—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π</li>
          <li>–õ—é–¥–µ–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏</li>
          <li>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤, —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –≤ –º–Ω–æ–≥–æ–∑–∞–¥–∞—á–Ω–æ–º —Ä–µ–∂–∏–º–µ</li>
        </ul>

        <h2 id="top-extensions">–¢–û–ü-9 —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π Chrome</h2>
        <p>–ú—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∏ –¥–µ—Å—è—Ç–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –∏ –≤—ã–±—Ä–∞–ª–∏ –ª—É—á—à–∏–µ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º —Ç–æ—á–Ω–æ—Å—Ç–∏, —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.</p>

        <h3 id="voice-in">1. Voice In Voice Typing</h3>
        <div class="extension-card">
          <p><strong>–†–µ–π—Ç–∏–Ω–≥:</strong> ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê (5/5)</p>
          <p>–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –≤ –ª—é–±—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—è—Ö –±—Ä–∞—É–∑–µ—Ä–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –±–æ–ª–µ–µ 120 —è–∑—ã–∫–æ–≤ –∏ –¥–∏–∞–ª–µ–∫—Ç–æ–≤.</p>
          <p><strong>–ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</strong></p>
          <ul>
            <li>–†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ª—é–±–æ–º —Å–∞–π—Ç–µ</li>
            <li>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–º–∞–Ω–¥ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏</li>
            <li>–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏</li>
            <li>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è</li>
          </ul>
        </div>

        <h2 id="conclusion">–ó–∞–∫–ª—é—á–µ–Ω–∏–µ</h2>
        <p>–†–∞—Å—à–∏—Ä–µ–Ω–∏—è Chrome –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ä–µ—á–∏ –≤ —Ç–µ–∫—Å—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ–≤—ã—à–∞—é—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã. –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –∏ –±—é–¥–∂–µ—Ç–∞.</p>
      `,
      "vr-meetings": `
        <p class="lead">–í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã –¥–ª—è –¥–µ–ª–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á. –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ VR-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø–æ–∑–≤–æ–ª—è—é—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–º–º–µ—Ä—Å–∏–≤–Ω—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–æ–π —Ä–∞–±–æ—Ç—ã, –≥–¥–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥—É—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å 3D-–æ–±—ä–µ–∫—Ç–∞–º–∏ –∏ —Å–æ–≤–º–µ—Å—Ç–Ω–æ —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏.</p>

        <h2 id="intro">–í–≤–µ–¥–µ–Ω–∏–µ</h2>
        <p>–ü–∞–Ω–¥–µ–º–∏—è COVID-19 —É—Å–∫–æ—Ä–∏–ª–∞ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ, –Ω–æ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –Ω–µ –≤—Å–µ–≥–¥–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è. VR-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—é –≤—Å—Ç—Ä–µ—á, —Å–æ–∑–¥–∞–≤–∞—è –æ—â—É—â–µ–Ω–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –≤ –æ–¥–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ.</p>

        <h2 id="advantages">–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ VR-–≤—Å—Ç—Ä–µ—á</h2>
        <p>VR-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ–≤—ã—à–∞—é—Ç –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –ø–æ–∑–≤–æ–ª—è—é—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞, –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π –≤ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è—Ö.</p>

        <h2 id="conclusion">–ó–∞–∫–ª—é—á–µ–Ω–∏–µ</h2>
        <p>–ü–æ –ø—Ä–æ–≥–Ω–æ–∑–∞–º –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤, –∫ 2030 –≥–æ–¥—É –±–æ–ª–µ–µ 50% –¥–µ–ª–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á –±—É–¥—É—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∏–ª–∏ —Å–º–µ—à–∞–Ω–Ω–æ–π —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏. –ö–æ–º–ø–∞–Ω–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–Ω—É—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —ç—Ç–∏–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è, –ø–æ–ª—É—á–∞—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ.</p>
      `,
      default: `
        <p>–≠—Ç–æ –æ–±—Ä–∞–∑–µ—Ü –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç—å–∏. –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.</p>

        <h2>–û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ</h2>
        <p>–ó–¥–µ—Å—å —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å —Å—Ç–∞—Ç—å–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ–º —Ç–µ–º—ã, –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏.</p>

        <h2>–ó–∞–∫–ª—é—á–µ–Ω–∏–µ</h2>
        <p>–ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ –∏ –∫–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã —Å—Ç–∞—Ç—å–∏ –¥–ª—è —á–∏—Ç–∞—Ç–µ–ª–µ–π.</p>
      `,
    };

    return contentTemplates[type] || contentTemplates["default"];
  }

  // Generic data operations
  private getData<T>(key: string): T[] {
    const data = localStorage.getItem(key);
    return data ? JSON.parse(data) : [];
  }

  private saveData<T>(key: string, data: T[]): void {
    localStorage.setItem(key, JSON.stringify(data));
  }

  // Update category post counts
  private updateCategoryPostCount(): void {
    const posts = this.getData<BlogPost>(STORAGE_KEYS.POSTS);
    const categories = this.getData<BlogCategory>(STORAGE_KEYS.CATEGORIES);

    const updatedCategories = categories.map((category) => ({
      ...category,
      postCount: posts.filter(
        (post) => post.category === category.id && post.status === "published",
      ).length,
    }));

    this.saveData(STORAGE_KEYS.CATEGORIES, updatedCategories);
  }

  // Public methods for data access
  getAllPosts(): BlogPost[] {
    return this.getData<BlogPost>(STORAGE_KEYS.POSTS);
  }

  getPublishedPosts(): BlogPost[] {
    return this.getAllPosts().filter((post) => post.status === "published");
  }

  getPostById(id: string): BlogPost | null {
    const posts = this.getAllPosts();
    return posts.find((post) => post.id === id) || null;
  }

  getPostBySlug(slug: string): BlogPost | null {
    const posts = this.getAllPosts();
    return posts.find((post) => post.slug === slug) || null;
  }

  getPostsByCategory(categoryId: string): BlogPost[] {
    return this.getPublishedPosts().filter(
      (post) => post.category === categoryId,
    );
  }

  getPostsByAuthor(authorId: string): BlogPost[] {
    return this.getPublishedPosts().filter((post) => post.author === authorId);
  }

  getFeaturedPosts(): BlogPost[] {
    return this.getPublishedPosts().filter((post) => post.featured);
  }

  getRelatedPosts(postId: string, limit: number = 3): BlogPost[] {
    const currentPost = this.getPostById(postId);
    if (!currentPost) return [];

    const allPosts = this.getPublishedPosts().filter(
      (post) => post.id !== postId,
    );

    // Score posts based on category and tags match
    const scoredPosts = allPosts.map((post) => {
      let score = 0;

      // Same category gets higher score
      if (post.category === currentPost.category) score += 3;

      // Shared tags
      const sharedTags = post.tags.filter((tag) =>
        currentPost.tags.includes(tag),
      );
      score += sharedTags.length;

      return { post, score };
    });

    return scoredPosts
      .sort((a, b) => b.score - a.score)
      .slice(0, limit)
      .map((item) => item.post);
  }

  getAllCategories(): BlogCategory[] {
    return this.getData<BlogCategory>(STORAGE_KEYS.CATEGORIES);
  }

  getCategoriesWithPosts(): BlogCategory[] {
    return this.getAllCategories().filter((category) => category.postCount > 0);
  }

  getCategoryById(id: string): BlogCategory | null {
    const categories = this.getAllCategories();
    return categories.find((category) => category.id === id) || null;
  }

  getCategoryBySlug(slug: string): BlogCategory | null {
    const categories = this.getAllCategories();
    return categories.find((category) => category.slug === slug) || null;
  }

  getAllAuthors(): BlogAuthor[] {
    return this.getData<BlogAuthor>(STORAGE_KEYS.AUTHORS);
  }

  getAuthorById(id: string): BlogAuthor | null {
    const authors = this.getAllAuthors();
    return authors.find((author) => author.id === id) || null;
  }

  getStats(): BlogStats {
    const posts = this.getAllPosts();
    const categories = this.getAllCategories();

    return {
      totalPosts: posts.length,
      totalViews: posts.reduce((sum, post) => sum + post.views, 0),
      totalCategories: categories.length,
      publishedPosts: posts.filter((post) => post.status === "published")
        .length,
      draftPosts: posts.filter((post) => post.status === "draft").length,
    };
  }

  // Search functionality
  searchPosts(query: string): BlogPost[] {
    const posts = this.getPublishedPosts();
    const searchTerm = query.toLowerCase();

    return posts.filter(
      (post) =>
        post.title.toLowerCase().includes(searchTerm) ||
        post.excerpt.toLowerCase().includes(searchTerm) ||
        post.content.toLowerCase().includes(searchTerm) ||
        post.tags.some((tag) => tag.toLowerCase().includes(searchTerm)),
    );
  }

  // CRUD operations for posts
  createPost(post: Omit<BlogPost, "id">): BlogPost {
    const newPost: BlogPost = {
      ...post,
      id: Date.now().toString(),
    };

    const posts = this.getAllPosts();
    posts.push(newPost);
    this.saveData(STORAGE_KEYS.POSTS, posts);
    this.updateCategoryPostCount();

    return newPost;
  }

  updatePost(id: string, updates: Partial<BlogPost>): BlogPost | null {
    const posts = this.getAllPosts();
    const index = posts.findIndex((post) => post.id === id);

    if (index === -1) return null;

    posts[index] = {
      ...posts[index],
      ...updates,
      updatedAt: new Date().toISOString(),
    };
    this.saveData(STORAGE_KEYS.POSTS, posts);
    this.updateCategoryPostCount();

    return posts[index];
  }

  deletePost(id: string): boolean {
    const posts = this.getAllPosts();
    const filteredPosts = posts.filter((post) => post.id !== id);

    if (filteredPosts.length === posts.length) return false;

    this.saveData(STORAGE_KEYS.POSTS, filteredPosts);
    this.updateCategoryPostCount();
    return true;
  }

  // CRUD operations for categories
  createCategory(
    category: Omit<BlogCategory, "id" | "postCount">,
  ): BlogCategory {
    const newCategory: BlogCategory = {
      ...category,
      id: Date.now().toString(),
      postCount: 0,
    };

    const categories = this.getAllCategories();
    categories.push(newCategory);
    this.saveData(STORAGE_KEYS.CATEGORIES, categories);

    return newCategory;
  }

  updateCategory(
    id: string,
    updates: Partial<BlogCategory>,
  ): BlogCategory | null {
    const categories = this.getAllCategories();
    const index = categories.findIndex((category) => category.id === id);

    if (index === -1) return null;

    categories[index] = { ...categories[index], ...updates };
    this.saveData(STORAGE_KEYS.CATEGORIES, categories);

    return categories[index];
  }

  deleteCategory(id: string): boolean {
    const posts = this.getAllPosts();
    const hasPostsInCategory = posts.some((post) => post.category === id);

    if (hasPostsInCategory) return false; // Cannot delete category with posts

    const categories = this.getAllCategories();
    const filteredCategories = categories.filter(
      (category) => category.id !== id,
    );

    if (filteredCategories.length === categories.length) return false;

    this.saveData(STORAGE_KEYS.CATEGORIES, filteredCategories);
    return true;
  }
}

// Create and export database instance
const blogDatabase = new BlogDatabase();
export default blogDatabase;
